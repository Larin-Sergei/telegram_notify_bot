import asyncio
import logging
import os
from dotenv import load_dotenv
load_dotenv()
import re
import datetime
from collections import defaultdict
from typing import Callable, Dict, Any, Awaitable

import requests
from aiogram import Bot, Router, Dispatcher, types, F, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, Message, TelegramObject, InputMediaPhoto, InputMediaDocument


from aiogram.types import ChatMemberUpdated

from db import Database

MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB
MAX_FILES = 10

def get_headers(token):
    headers = {
        'Private-Token': token
    }
    return headers

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-4852826917"))
GITLAB_HOST = os.getenv("GITLAB_HOST")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
GITLAB_PROJECT_ID = int(os.getenv("GITLAB_PROJECT_ID"))
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
    "table_name": os.getenv("DB_TABLE_NAME")
}
HEADERS = get_headers(GITLAB_TOKEN)
ISSUE_TYPE_NAMES = ["–ó–∞–¥–∞—á–∞", "–ü—Ä–æ–±–ª–µ–º–∞"]

bot = Bot(token=TELEGRAM_TOKEN,default=DefaultBotProperties(parse_mode="HTML"))
keyboard_to_delete = types.ReplyKeyboardRemove()
router = Router()
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)
db = Database(
    dbname=DB_CONFIG['dbname'],
    user=DB_CONFIG['user'],
    password=DB_CONFIG['password'],
    host=DB_CONFIG['host'],
    port=DB_CONFIG['port'])

def get_gitlab_users():
    """
    –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ GitLab –ø–æ telegram_id
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É
    """
    url = f'{GITLAB_HOST}/api/v4/users'
    response = requests.get(url, headers=HEADERS)
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Gitlab: {response} {response.json()}")
    if response.status_code == 200:
        return response.json()
    return None

def get_user_from_users_list(users: list, user_id: int):
    """
    :param users: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∞—á–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = str(user_id)
    if users:
        for user in users:
            if user.get('skype') == user_id:
                return user
    else:
        return None

def create_personal_access_token(params: dict):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param params: –°–ª–æ–≤–∞—Ä—å: user_id - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, scopes[] - –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞,
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    """
    url = f'{GITLAB_HOST}/api/v4/users/{params['user_id']}/personal_access_tokens'
    response = requests.post(url, headers=HEADERS, params=params)
    logging.debug(f"{response} {response.json()}")
    if response.status_code == 201:
        return response.json()
    return None

def get_gitlab_projects(headers):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param headers: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    :return: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    url = f'{GITLAB_HOST}/api/v4/projects'
    response = requests.get(url, headers=headers)
    logging.debug(f"{response} {response.json()}")
    if response.status_code == 200:
        return response.json()
    return None

def create_gitlab_issue(project_id: int, params: dict) -> dict | None:
    url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues"
    r = requests.post(url, headers=HEADERS, params=params)
    logging.debug(f"Create issue ‚Üí {r.status_code} {r.text}")
    return r.json() if r.status_code == 201 else None

def make_row_keyboard(items: list[str], add_back_button: bool = True) -> ReplyKeyboardMarkup:
    buttons = [KeyboardButton(text=item) for item in items]
    if add_back_button:
        buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_user(user_id: int, telegram_chat_id: int):
    user_db = db.get_user_by_telegram_id(user_id)
    if user_db:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –ë–î –Ω–∞–π–¥–µ–Ω")
        return user_db
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω")
        gitlab_users = get_gitlab_users()
        if gitlab_users:
            gitlab_user = get_user_from_users_list(gitlab_users, user_id)
            if gitlab_user:
                params = {
                    'user_id': gitlab_user['id'],
                    'name': 'GitLab & Telegram Bot',
                    'scopes[]': 'api'
                }
                user_token_gitlab = create_personal_access_token(params)
                if user_token_gitlab:

                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ Gitlab –Ω–∞–π–¥–µ–Ω {gitlab_user}")

                    user_id_gitlab = gitlab_user['id']
                    user_username_gitlab = gitlab_user['username']

                    user_db = db.create_user(telegram_id=user_id, gitlab_id=user_id_gitlab,
                                             gitlab_login=user_username_gitlab,
                                             gitlab_token=user_token_gitlab['token'],
                                             telegram_chat_id=telegram_chat_id)
                    if user_db:
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω –≤ –ë–î {user_db}")
                        return user_db
                    else:
                        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –ë–î")
                else:
                    logging.warning(
                        f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Å–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω Gitlab –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ")
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ Gitlab –Ω–µ –Ω–∞–π–¥–µ–Ω {gitlab_user}")
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Gitlab")
        return None


class AlbumMiddleware(BaseMiddleware):
    def __init__(self, latency: float = 0.3):
        self.latency = latency
        self.albums = defaultdict(list)

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
    ) -> Any:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
        if not event.media_group_id:
            return await handler(event, data)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º
        self.albums[event.media_group_id].append(event)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ–≥–æ –∞–ª—å–±–æ–º–∞
        await asyncio.sleep(self.latency)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º–µ
        if event.media_group_id in self.albums:
            data["album"] = self.albums.pop(event.media_group_id)
            return await handler(event, data)

album_middleware = AlbumMiddleware()
dp.message.middleware(album_middleware)

class CreateIssue(StatesGroup):
    select_title = State()  # –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
    select_description = State()  # –£–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    add_files = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    send_issue = State()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏ –∑–∞–¥–∞—á—É/–ø—Ä–æ–±–ª–µ–º—É

class CreateGitlabUser(StatesGroup):
    create_gitlab_user = State()
    set_gitlab_login = State()

class ReopenIssue(StatesGroup):
    enter_comment = State()
    add_files = State()

class AttachFiles(StatesGroup):
    sending = State()

class CommentIssue(StatesGroup):
    enter_comment = State()
    add_files = State()

@router.callback_query(lambda c: c.data.startswith("attach:"))
async def attach_files_callback(callback: types.CallbackQuery, state: FSMContext):
    _, project_id, issue_iid = callback.data.split(":")
    await state.update_data(
        project_id=int(project_id),
        issue_iid=int(issue_iid),
        attach_files=[]
    )
    await state.set_state(AttachFiles.sending)
    await callback.message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ",
        reply_markup=make_row_keyboard(['–ì–æ—Ç–æ–≤–æ'], add_back_button=False)
    )
    await callback.answer()

@router.message(StateFilter(AttachFiles.sending), F.media_group_id)
async def collect_attach_media_group(
    message: types.Message,
    album: list[types.Message],
    state: FSMContext
):
    data = await state.get_data()
    files = data.get('attach_files', [])

    for msg in album:
        file_obj = msg.document or msg.photo[-1]
        file_info = await bot.get_file(file_obj.file_id)
        downloaded = await bot.download_file(file_info.file_path)
        content = downloaded.read()

        if len(content) > MAX_FILE_SIZE:
            await msg.answer(f"üö´ –§–∞–π–ª {getattr(file_obj, 'file_name', file_obj.file_id)} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            continue
        if len(files) >= MAX_FILES:
            await msg.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤")
            break

        files.append({
            'file_name': getattr(file_obj, 'file_name', f"file_{file_obj.file_id}"),
            'file_data': content,
            'mime_type': file_obj.mime_type
        })

    await state.update_data(attach_files=files)
    await message.answer(f"üì• –ü—Ä–∏–Ω—è—Ç–æ {len(album)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞")

@router.message(StateFilter(AttachFiles.sending), F.document | F.photo)
async def collect_attach_files(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = data['attach_files']
    file_obj = message.document or message.photo[-1]
    file_info = await bot.get_file(file_obj.file_id)
    downloaded = await bot.download_file(file_info.file_path)
    content = downloaded.read()

    if len(content) > MAX_FILE_SIZE:
        return await message.answer(f"üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å {MAX_FILE_SIZE//1024//1024} MB)")
    if len(files) >= MAX_FILES:
        return await message.answer(f"üö´ –ú–∞–∫—Å–∏–º—É–º {MAX_FILES} —Ñ–∞–π–ª–æ–≤")

    files.append({
        'file_name': getattr(file_obj, 'file_name', f"file_{file_obj.file_id}"),
        'file_data': content,
        'mime_type': file_obj.mime_type
    })
    await state.update_data(attach_files=files)
    await message.answer(f"üì• –ü—Ä–∏–Ω—è—Ç–æ: {files[-1]['file_name']}")

@router.message(StateFilter(AttachFiles.sending), F.text == '–ì–æ—Ç–æ–≤–æ')
async def finish_attach_files(message: types.Message, state: FSMContext):
    data = await state.get_data()
    project_id = data['project_id']
    issue_iid = data['issue_iid']
    files = data.get('attach_files', [])

    headers = HEADERS

    markdowns = []
    for f in files:
        resp = requests.post(
            f"{GITLAB_HOST}/api/v4/projects/{project_id}/uploads",
            headers=headers,
            files={'file': (f['file_name'], f['file_data'], f['mime_type'])}
        )
        if resp.status_code == 201:
            markdowns.append(resp.json()['markdown'])
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {f['file_name']}")

    if markdowns:
        body = "<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n" + "\n".join(markdowns)
        notes_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}/notes"
        note_resp = requests.post(notes_url, headers=headers, json={'body': body})
        if note_resp.status_code == 201:
            await message.answer("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.", parse_mode='HTML')
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é.")
    else:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è.")

    await state.clear()
    await cmd_start(message, state)

@router.message(StateFilter(ReopenIssue.enter_comment))
async def process_reopen_comment(message: types.Message, state: FSMContext):
    await state.update_data(
        comment_text=message.text,
        attach_files=[]
    )
    await message.answer(
        "‚úèÔ∏è –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=make_row_keyboard(['–ì–æ—Ç–æ–≤–æ'], add_back_button=False)
    )
    await state.set_state(ReopenIssue.add_files)

@router.callback_query(F.data.startswith("reopen:"))
async def reopen_issue_callback(callback: types.CallbackQuery, state: FSMContext):
    _, project_id, issue_iid = callback.data.split(":")
    project_id = int(project_id)
    issue_iid = int(issue_iid)
    await state.update_data(project_id=project_id, issue_iid=issue_iid)

    db.add_subscription(callback.from_user.id, project_id, issue_iid)

    await state.set_state(ReopenIssue.enter_comment)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É:")
    await callback.answer()

@router.message(StateFilter(ReopenIssue.add_files), F.document | F.photo)
async def collect_reopen_files(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = data['attach_files']
    file_obj = message.document or message.photo[-1]
    file_info = await bot.get_file(file_obj.file_id)
    downloaded = await bot.download_file(file_info.file_path)
    content = downloaded.read()

    if len(content) > MAX_FILE_SIZE:
        return await message.answer(f"üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å {MAX_FILE_SIZE//1024//1024} MB)")
    if len(files) >= MAX_FILES:
        return await message.answer(f"üö´ –ú–∞–∫—Å–∏–º—É–º {MAX_FILES} —Ñ–∞–π–ª–æ–≤")

    files.append({
        'file_name': getattr(file_obj, 'file_name', f"file_{file_obj.file_id}"),
        'file_data': content,
        'mime_type': file_obj.mime_type
    })
    await state.update_data(attach_files=files)
    await message.answer(f"üì• –ü—Ä–∏–Ω—è—Ç–æ: {files[-1]['file_name']}")

@router.message(StateFilter(ReopenIssue.add_files), F.text == '–ì–æ—Ç–æ–≤–æ')
async def finish_reopen(message: types.Message, state: FSMContext):
    data = await state.get_data()
    project_id = data["project_id"]
    issue_iid = data["issue_iid"]
    comment = data["comment_text"]
    files = data.get("attach_files", [])

    headers = HEADERS

    markdowns = []
    for f in files:
        resp = requests.post(
            f"{GITLAB_HOST}/api/v4/projects/{project_id}/uploads",
            headers=headers,
            files={'file': (f['file_name'], f['file_data'], f['mime_type'])}
        )
        if resp.status_code == 201:
            markdowns.append(resp.json()['markdown'])

    body = comment
    if markdowns:
        body += "\n\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n" + "\n".join(markdowns)

    notes_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}/notes"
    note_resp = requests.post(notes_url, headers=headers, json={"body": body})
    if note_resp.status_code != 201:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.")
        await state.clear()
        return

    issue_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}"

    payload = {"state_event": "reopen",
               "labels": "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"}

    reopen_resp = requests.put(issue_url, headers=headers, json=payload)

    if reopen_resp.status_code != 200:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
    else:
        db.mark_issue_unnotified(project_id, issue_iid)
    await state.clear()

@router.message(StateFilter(CommentIssue.add_files), F.document | F.photo)
async def collect_comment_files(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = data['attach_files']
    file_obj = message.document or message.photo[-1]
    file_info = await bot.get_file(file_obj.file_id)
    content = (await bot.download_file(file_info.file_path)).read()
    if len(content) > MAX_FILE_SIZE:
        return await message.answer("üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
    if len(files) >= MAX_FILES:
        return await message.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤")
    files.append({
        'file_name': getattr(file_obj, 'file_name', f"file_{file_obj.file_id}"),
        'file_data': content,
        'mime_type': file_obj.mime_type
    })
    await state.update_data(attach_files=files)
    await message.answer(f"üì• –ü—Ä–∏–Ω—è—Ç–æ: {files[-1]['file_name']}")

@router.message(StateFilter(CommentIssue.add_files), F.text == '–ì–æ—Ç–æ–≤–æ')
async def finish_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    project_id = data["project_id"]
    issue_iid = data["issue_iid"]
    comment = data["comment_text"]
    files = data.get("attach_files", [])
    headers = HEADERS

    markdowns = []
    for f in files:
        resp = requests.post(
            f"{GITLAB_HOST}/api/v4/projects/{project_id}/uploads",
            headers=headers,
            files={'file': (f['file_name'], f['file_data'], f['mime_type'])}
        )
        if resp.status_code == 201:
            markdowns.append(resp.json()['markdown'])

    body = comment
    if markdowns:
        body += "\n\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n" + "\n".join(markdowns)

    notes_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}/notes"
    note_resp = requests.post(notes_url, headers=headers, json={"body": body})
    if note_resp.status_code != 201:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.")
    else:
        await message.reply("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é.")
    await state.clear()

def notify_issue_updated(project_id: int, issue_iid: int, message_text: str):
    subscribers = db.get_subscribers(project_id, issue_iid)
    for telegram_id in subscribers:
        try:
            asyncio.create_task(bot.send_message(chat_id=telegram_id, text=message_text))
        except Exception as e:
            logging.warning(f"Failed to notify user {telegram_id}: {e}")

async def show_issue_add_files(message: types.Message, state: FSMContext):
    await message.reply(text=f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è', reply_markup=make_row_keyboard(['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']))

async def show_issue_select_description(message: types.Message, state: FSMContext):
    await message.reply(text=f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=make_row_keyboard([]))


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    rows = db.get_all_tracked_issues()
    for project_id, issue_iid, chat_id, last_known, _ in rows:
        if chat_id != message.chat.id:
            continue

        issue_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}"
        resp = requests.get(issue_url, headers=HEADERS)
        if resp.status_code != 200:
            continue
        issue = resp.json()

        if issue["state"] == "closed":
            closed_at = issue.get("closed_at")
            closed_dt = None
            if closed_at:
                closed_dt = datetime.datetime.fromisoformat(closed_at.rstrip("Z"))

            notes = requests.get(
                f"{issue_url}/notes",
                params={"order_by": "created_at", "sort": "desc"},
                headers=HEADERS
            ).json()

            assignees = issue.get("assignees") or []
            if assignees:
                assignee = assignees[0]
                assignee_id = assignee["id"]
                assignee_name = assignee.get("name", "‚Äî")
            else:
                single = issue.get("assignee") or {}
                assignee_id = single.get("id")
                assignee_name = single.get("name", "‚Äî")

            closing_comment = None
            closing_comment_id = None
            if closed_dt:
                for n in notes:
                    if n.get("system"):
                        continue
                    note_dt = datetime.datetime.fromisoformat(n["created_at"].rstrip("Z"))
                    if abs((note_dt - closed_dt).total_seconds()) < 1:
                        closing_comment = n["body"].strip()
                        closing_comment_id = n["id"]
                        break

            if closing_comment is None:
                non_system = [n for n in notes if not n.get("system", False)]
                if non_system and assignee_id and non_system[0]["author"]["id"] == assignee_id:
                    closing_comment = non_system[0]["body"].strip()
                    closing_comment_id = non_system[0]["id"]

            lines = [
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{issue_iid} ({issue['state']}) <b>{issue['title']}</b> –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –ø—Ä–∏–µ–º–∫—É",
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}",
                "",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é ‚Äî "
                "–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É, "
                "–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª.",
            ]
            if closing_comment:
                lines += [
                    "",
                    "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
                    closing_comment
                ]
            detail_text = "\n".join(lines)

            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å",    callback_data=f"ack:{project_id}:{issue_iid}"),
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"reopen:{project_id}:{issue_iid}")
            ]])

            await state.clear()
            await message.answer(detail_text, reply_markup=kb, parse_mode="HTML")
            return

        raw_desc = issue.get('description') or ""
        sanitized = re.sub(r'<details>.*?</details>', "", raw_desc, flags=re.DOTALL | re.IGNORECASE)
        body_only = strip_metadata(sanitized) or "‚Äî"

        all_notes = requests.get(f"{issue_url}/notes", headers=HEADERS).json()
        user_notes = [n for n in all_notes if not n.get("system", False)]
        user_notes.sort(key=lambda n: n["created_at"])
        last_three = user_notes[-3:]
        if last_three:
            comments = []
            for note in last_three:
                dt = datetime.datetime.fromisoformat(note["created_at"].rstrip("Z"))
                dt_str = dt.strftime("%d.%m.%Y %H:%M")
                comments.append(f"<i>{note['author']['name']}</i>, {dt_str}\n{note['body']}")
            comments_text = "\n\n".join(comments)
        else:
            comments_text = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."

        in_progress = (f"<b>–¢–µ–∫—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{issue_iid} ({issue['state']}) ‚Äì {issue['title']}</b>\n\n"
                f"{body_only}\n\n"
                f"{comments_text}")
        kb = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment:{project_id}:{issue_iid}")]])
        await state.clear()
        await message.answer(in_progress, reply_markup=kb, parse_mode="HTML")
        return

    await prompt_issue_creation(message, state)

@router.callback_query(lambda c: c.data.startswith("issue:"))
async def issue_selected_callback(callback: types.CallbackQuery):
    _, project_id, issue_iid = callback.data.split(":")
    project_id, issue_iid = int(project_id), int(issue_iid)

    user_db = get_user(callback.from_user.id, callback.message.chat.id)
    if not user_db:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return

    headers = HEADERS
    issue_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}"
    resp = requests.get(issue_url, headers=headers)
    if resp.status_code != 200:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        await callback.answer()
        return
    issue = resp.json()

    raw_desc = issue.get('description') or ""
    sanitized_desc = re.sub(r'<details>.*?</details>', '', raw_desc, flags=re.DOTALL|re.IGNORECASE)
    body_only = strip_metadata(sanitized_desc) or "‚Äî"

    attachments = re.findall(r'\[([^\]]+)\]\((/uploads/[^\)]+)\)', raw_desc)

    notes_url = f"{issue_url}/notes"
    notes_resp = requests.get(notes_url, headers=headers)
    latest = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."
    if notes_resp.status_code == 200:
        notes = sorted(notes_resp.json(), key=lambda n: n['created_at'], reverse=True)
        if notes:
            latest = notes[0].get('body', latest)

    issue_text = (
        f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{issue['iid']}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {issue['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {body_only}\n"
        f"–°—Ç–∞—Ç—É—Å: {issue['state']}\n"
        f"–ê–≤—Ç–æ—Ä: {issue['author']['name']}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{latest}"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data=f"comment:{project_id}:{issue_iid}"),
                InlineKeyboardButton(
                    text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã",
                    callback_data=f"attach:{project_id}:{issue_iid}")
            ]])
    await callback.message.answer(issue_text, reply_markup=keyboard, parse_mode='HTML')

    for label, path in attachments:
        file_url = f"{GITLAB_HOST}{path}"
        resp = requests.get(file_url, headers=HEADERS)
        if resp.status_code == 200:
            tg_file = BufferedInputFile(
                resp.content,
                filename=label)
            await callback.message.answer_document(
                document=tg_file,
                caption=label)
        else:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ {label}")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("comment:"))
async def comment_issue_callback(callback: types.CallbackQuery, state: FSMContext):
    _, project_id, issue_iid = callback.data.split(":")
    project_id = int(project_id)
    issue_iid = int(issue_iid)
    await state.update_data(project_id=project_id, issue_iid=issue_iid)

    db.add_subscription(callback.from_user.id, project_id, issue_iid)

    await state.set_state(CommentIssue.enter_comment)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é:")
    await callback.answer()

@router.message(StateFilter(CommentIssue.enter_comment))
async def process_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(comment_text=message.text, attach_files=[])
    await message.answer(
        "‚úèÔ∏è –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=make_row_keyboard(['–ì–æ—Ç–æ–≤–æ'], add_back_button=False)
    )
    await state.set_state(CommentIssue.add_files)

@router.message(StateFilter(CreateIssue.select_title))
async def cmd_select_title(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        return await message.reply(
            "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=make_row_keyboard([], add_back_button=False))

    await add_state_to_history(state, await state.get_state())
    await state.update_data(issue_title=message.text)
    await message.reply(
        text = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        reply_markup = make_row_keyboard([], add_back_button=True))
    await state.set_state(CreateIssue.select_description)

@router.message(StateFilter(CreateIssue.select_description))
async def cmd_select_description(message: types.Message, state: FSMContext):
    await add_state_to_history(state, await state.get_state())
    await state.update_data(issue_description=message.text)
    await state.update_data(files=[])
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await message.reply(
            "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=make_row_keyboard([], add_back_button=False))
        return await state.set_state(CreateIssue.select_title)
    await message.reply(text=f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è', reply_markup=make_row_keyboard(['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'], add_back_button=True))
    await state.set_state(CreateIssue.add_files)

@router.message(StateFilter(CreateIssue.add_files), F.media_group_id)
async def handle_media_group(message: types.Message, album: list[types.Message], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    await add_state_to_history(state, await state.get_state())
    data = await state.get_data()
    files = data.get('files', [])
    for msg in album:
        file = None
        file_info = None
        if msg.document:
            file = msg.document
            file_info = await bot.get_file(file.file_id)
            file_type = "document"
        elif msg.photo:
            file = msg.photo[-1]
            file_info = await bot.get_file(file.file_id)
            file_type = "photo"

        if file_info:
            downloaded_file = await bot.download_file(file_info.file_path)
            file_data = downloaded_file.read()

            file_size = len(file_data)
            if file_size > MAX_FILE_SIZE:
                await msg.answer(
                    f"–§–∞–π–ª {file.file_name if file else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {MAX_FILE_SIZE // 1024 // 1024} MB)")

            if len(files) >= MAX_FILES:
                await msg.answer(f"–ú–∞–∫—Å–∏–º—É–º {MAX_FILES} —Ñ–∞–π–ª–æ–≤")

            files.append({
                'file_name': file.file_name if hasattr(file, 'file_name') else f"photo_{file.file_id}.jpg",
                'file_data': file_data,
                'mime_type': file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
            })
            await state.update_data(files=files)
@router.message(StateFilter(CreateIssue.add_files), F.document | F.photo)
async def collect_files(message: types.Message, state: FSMContext):
    await add_state_to_history(state, await state.get_state())
    data = await state.get_data()
    files = data.get('files', [])
    file = None
    file_info = None
    if message.document:
        file = message.document
        file_info = await bot.get_file(file.file_id)
    elif message.photo:
        file = message.photo[-1]
        file_info = await bot.get_file(file.file_id)

    if file_info:
        downloaded_file = await bot.download_file(file_info.file_path)
        file_data = downloaded_file.read()
        file_size = len(file_data)
        if file_size > MAX_FILE_SIZE:
            await message.answer(f"–§–∞–π–ª {file.file_name if file else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {MAX_FILE_SIZE // 1024 // 1024} MB)")
        if len(files) >= MAX_FILES:
            await message.answer(f"–ú–∞–∫—Å–∏–º—É–º {MAX_FILES} —Ñ–∞–π–ª–æ–≤")
        files.append({
            'file_name': file.file_name if hasattr(file, 'file_name') else f"photo_{file.file_id}.jpg",
            'file_data': file_data,
            'mime_type': file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
        })
        await state.update_data(files=files)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        send_or_cancel = ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]
        await message.answer(text=f'~~~~ –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ~~~~\n'
                                 f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data.get('issue_title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n'
                                 f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('issue_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}', parse_mode='HTML',
                            reply_markup=make_row_keyboard(send_or_cancel))
        await state.set_state(CreateIssue.send_issue)

@router.message(StateFilter(CreateIssue.send_issue))
async def cmd_send_issue(message: types.Message, state: FSMContext):
    if message.text != '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        await message.reply("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return await cmd_start(message, state)

    data = await state.get_data()
    usr  = message.from_user

    header_lines: list[str] = []
    if usr.username:
        header_lines.append(f"–ù–∏–∫–Ω–µ–π–º: @{usr.username}")
    header_lines.append(f"ID: {usr.id}")
    if usr.full_name:
        header_lines.append(f"–ò–º—è: {usr.full_name}")
    phone = data.get("phone_number")
    if phone:
        header_lines.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")

    header = "\n\n".join(header_lines)
    body = data["issue_description"]
    full_descr = f"{header}\n\n{body}"
    params = {
        "title": data["issue_title"],
        "description": full_descr,
        "issue_type": "incident",
    }
    gitlab_issue = create_gitlab_issue(GITLAB_PROJECT_ID, params)

    if gitlab_issue:
        await message.reply(f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        db.create_tracked_issue(
            project_id=GITLAB_PROJECT_ID,
            issue_iid=gitlab_issue["iid"],
            telegram_chat_id=message.chat.id
        )
        db.add_subscription(message.from_user.id, GITLAB_PROJECT_ID, gitlab_issue["iid"])
        try:
            await bot.send_message(
                GROUP_CHAT_ID,
                f"üöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{gitlab_issue['iid']}: <b>{data['issue_title']}</b>\n"
                f"{GITLAB_HOST}/{GITLAB_PROJECT_ID}/-/issues/{gitlab_issue['iid']}",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.warning(f"Failed to notify group {GROUP_CHAT_ID}: {e}")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.")

    await state.clear()

@router.callback_query(lambda c: c.data.startswith("ack:"))
async def acknowledge_issue_callback(callback: types.CallbackQuery):
    _, project_id, issue_iid = callback.data.split(":")
    project_id, issue_iid = int(project_id), int(issue_iid)

    issue_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}"
    requests.put(issue_url, headers=HEADERS, json={"labels": ""})
    db.delete_tracked_issue(project_id, issue_iid)

    await callback.message.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ!", parse_mode="HTML")
    await callback.answer()

@router.message(StateFilter(CreateIssue.add_files), F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
async def cmd_ready_to_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    summary = (
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['issue_title']}\n"
             f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['issue_description']}\n"
             f"<b>–§–∞–π–ª–æ–≤:</b> {len(files)}")
    await message.reply(
        summary + "\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?",
        reply_markup=make_row_keyboard(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]))
    await state.set_state(CreateIssue.send_issue)

async def monitor_closed_issues():
    logging.info("üö® monitor_closed_issues has started")
    while True:
        for project_id, issue_iid, chat_id in db.get_unnotified_issues():
            issue_url = f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}"
            r = requests.get(issue_url, headers=HEADERS)
            if r.status_code != 200:
                continue
            issue = r.json()
            if issue.get("state") != "closed":
                continue

            requests.put(issue_url, headers=HEADERS, json={"labels": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"})

            closed_at = issue.get("closed_at")
            closed_dt = None
            if closed_at:
                closed_dt = datetime.datetime.fromisoformat(closed_at.rstrip("Z"))

            notes = requests.get(
                f"{issue_url}/notes",
                params={"order_by": "created_at", "sort": "desc"},
                headers=HEADERS
            ).json()

            assignees = issue.get("assignees") or []
            if assignees:
                assignee = assignees[0]
                assignee_id = assignee.get("id")
                assignee_name = assignee.get("name", "‚Äî")
            else:
                single = issue.get("assignee") or {}
                assignee_id = single.get("id")
                assignee_name = single.get("name", "‚Äî")

            closing_comment = None
            closing_comment_id = None
            if closed_dt:
                for n in notes:
                    if n.get("system"):
                        continue
                    note_dt = datetime.datetime.fromisoformat(n["created_at"].rstrip("Z"))
                    if abs((note_dt - closed_dt).total_seconds()) < 1:
                        closing_comment = n["body"].strip()
                        closing_comment_id = n["id"]
                        break

            if closing_comment is None:
                non_system = [n for n in notes if not n.get("system", False)]
                if non_system and assignee_id and non_system[0]["author"]["id"] == assignee_id:
                    closing_comment = non_system[0]["body"].strip()
                    closing_comment_id = non_system[0]["id"]

            lines = [
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{issue_iid} ({issue['state']}) <b>{issue['title']}</b> –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –ø—Ä–∏–µ–º–∫—É",
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}",
                "",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é ‚Äî "
                "–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É, "
                "–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª.",]
            if closing_comment:
                lines += ["",
                          "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
                          closing_comment]
            detail_text = "\n".join(lines)

            if closing_comment_id is not None:
                db.update_last_note_id(project_id, issue_iid, closing_comment_id)

            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å",    callback_data=f"ack:{project_id}:{issue_iid}"),
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"reopen:{project_id}:{issue_iid}")
            ]])
            await bot.send_message(chat_id, detail_text, parse_mode="HTML", reply_markup=kb)
            db.mark_issue_notified(project_id, issue_iid)

        await asyncio.sleep(60)

async def monitor_auto_ack():
    while True:
        cutoff = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
        rows = db.get_notified_unacked_older_than(cutoff)
        for project_id, issue_iid, chat_id in rows:
            db.delete_tracked_issue(project_id, issue_iid)
            await bot.send_message(
                chat_id,
                "‚è∞ –í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ ‚Äî –∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML")
        await asyncio.sleep(3600)

async def prompt_issue_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.reply(
        "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=make_row_keyboard([], add_back_button=False))
    await state.set_state(CreateIssue.select_title)

@router.message(StateFilter(CreateIssue.select_description), F.text == 'üîô –ù–∞–∑–∞–¥')
async def go_back_to_title(message: Message, state: FSMContext):
    await state.update_data(issue_description=None)
    await message.reply(
        "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=make_row_keyboard([], add_back_button=False))
    await state.set_state(CreateIssue.select_title)

@router.message(StateFilter(CreateIssue.add_files), F.text == 'üîô –ù–∞–∑–∞–¥')
async def go_back_to_description(message: Message, state: FSMContext):
    await state.update_data(files=[])
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=make_row_keyboard([], add_back_button=True))
    await state.set_state(CreateIssue.select_description)

async def monitor_new_comments():
    logging.info("üö® monitor_new_comments has started")
    link_regex = re.compile(r'\[([^\]]+)\]\((/uploads/[^)]+)\)')
    img_regex  = re.compile(r'!\[[^\]]*\]\((/uploads/[^)]+)\)')
    while True:
        for project_id, issue_iid, chat_id, last_known, _ in db.get_all_tracked_issues():
            r_issue = requests.get(
                f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}",
                headers=HEADERS)

            if r_issue.status_code != 200:
                continue
            issue = r_issue.json()

            if issue.get("state") == "closed":
                continue

            r_notes = requests.get(
                f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}/notes",
                params={"order_by": "created_at", "sort": "asc"},
                headers=HEADERS)

            if r_notes.status_code != 200:
                continue
            notes = [n for n in r_notes.json() if not n.get("system", False)]

            new_notes = [n for n in notes if n["id"] > last_known]
            if not new_notes:
                continue

            new_last = max(n["id"] for n in new_notes)
            db.update_last_note_id(project_id, issue_iid, new_last)

            owner_id = issue["author"]["id"]
            recips = set(db.get_subscribers(project_id, issue_iid))
            owner = db.get_user_by_gitlab_id(owner_id)
            if owner:
                recips.add(owner["telegram_chat_id"])

            for note in new_notes:
                if note["author"]["id"] == owner_id:
                    continue

                body = link_regex.sub("", note["body"])
                body = img_regex.sub("", body).strip()

                caption = (
                    f"üîî <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{issue_iid}\n\n"
                    f"{body}\n\n"
                    f"<i>–ê–≤—Ç–æ—Ä: {note['author']['name']}</i>"
                )

                attachments = link_regex.findall(note["body"])
                attachments += [
                    (alt or os.path.basename(p), p)
                    for p in img_regex.findall(note["body"])
                    for alt, p in [("", p)]
                ]

                if attachments:
                    media = []
                    for idx, (label, path) in enumerate(attachments):
                        resp = requests.get(f"{GITLAB_HOST}{path}", headers=HEADERS, stream=True)
                        if resp.status_code != 200:
                            continue
                        fn = label or os.path.basename(path).lstrip("_")
                        buf = BufferedInputFile(resp.content, filename=fn)
                        if resp.headers.get("Content-Type", "").startswith("image/"):
                            item = InputMediaPhoto(media=buf,
                                                   caption=caption if idx == 0 else fn,
                                                   parse_mode="HTML")
                        else:
                            item = InputMediaDocument(media=buf,
                                                      caption=caption if idx == 0 else fn,
                                                      parse_mode="HTML")
                        media.append(item)
                    for cid in recips:
                        await bot.send_media_group(cid, media)
                else:
                    for cid in recips:
                        await bot.send_message(cid, caption, parse_mode="HTML")

        await asyncio.sleep(60)

def strip_metadata(description: str) -> str:
    prefixes = ("–ù–∏–∫–Ω–µ–π–º:", "ID:", "–ò–º—è:", "–¢–µ–ª–µ—Ñ–æ–Ω:")
    lines = description.splitlines()
    i = 0
    while i < len(lines):
        text = lines[i].strip()
        if not text or any(text.startswith(p) for p in prefixes):
            i += 1
            continue
        break
    return "\n".join(lines[i:]).strip()

async def monitor_assignment_changes():
    logging.info("üö® monitor_assignment_changes has started")
    while True:
        for project_id, issue_iid, chat_id, _last_note, last_assignee in db.get_all_tracked_issues():
            resp = requests.get(
                f"{GITLAB_HOST}/api/v4/projects/{project_id}/issues/{issue_iid}",
                headers=HEADERS)
            if resp.status_code != 200:
                continue

            issue = resp.json()
            assignees = issue.get("assignees") or []
            curr_id = assignees[0]["id"] if assignees else None

            if curr_id is not None and curr_id != last_assignee:
                if last_assignee is None:
                    text = "üîî –ü–æ –æ–±—Ä–∞—â–µ–Ω–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                else:
                    text = "üîî –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"

                try:
                    await bot.send_message(chat_id, text, parse_mode="HTML")
                except Exception as e:
                    logging.warning(f"Failed to notify assignment change: {e}")

                db.update_last_assignee_id(project_id, issue_iid, curr_id)

        await asyncio.sleep(60)

@router.message(StateFilter(CreateGitlabUser.create_gitlab_user))
async def cmd_create_gitlab_user(message: types.Message, state: FSMContext):
    await add_state_to_history(state, await state.get_state())
    if message.text == '–î–∞':
        await message.reply(f'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=make_row_keyboard([]))
    elif message.text == '–ù–µ—Ç':
        await message.reply(f'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=make_row_keyboard([]))
    else:
        await message.reply(text=f'–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', reply_markup=make_row_keyboard([]))

@router.message(StateFilter(CreateGitlabUser.set_gitlab_login))
async def cmd_set_gitlab_login(message: types.Message, state: FSMContext):
    await add_state_to_history(state, await state.get_state())
    await state.clear()

async def add_state_to_history(state: FSMContext, new_state: str):
    data = await state.get_data()
    history = data.get("state_history", [])
    if not history or history[-1] != new_state:
        history.append(new_state)
        await state.update_data(state_history=history)


@router.my_chat_member()
async def on_added_to_group(my_chat_member: ChatMemberUpdated):
    if my_chat_member.new_chat_member.status in ("member", "administrator"):
        chat = my_chat_member.chat
        # record chat.id in your groups table
        db.register_group(chat.id)
        await bot.send_message(
            chat.id,
            "üëã Thanks for adding me! I‚Äôm now watching this group for GitLab issues."
        )

@router.message()
async def tracer(message: types.Message):
    logging.info(f"‚è≥ got {message.text!r} in chat {message.chat.id} ({message.chat.type})")

async def main():
    asyncio.create_task(monitor_closed_issues())
    asyncio.create_task(monitor_new_comments())
    await dp.start_polling(bot)

@dp.startup()
async def on_startup():
    logging.info("üîå on_startup: scheduling background tasks")
    asyncio.create_task(monitor_closed_issues())
    asyncio.create_task(monitor_new_comments())
    asyncio.create_task(monitor_assignment_changes())
    asyncio.create_task(monitor_auto_ack())

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    dp.run_polling(bot)
